def linear_search(numbers, target):
    n = len(numbers)  # N ser√° a quantidade de elementos da lista
    for index in range(0, n):  # vamos iterar a lista completa
        if (
            numbers[index] == target
        ):  # se encontrar o elemento alvo, retorne a posi√ß√£o
            return index

    return -1  # N√£o encontrou? Retorne -1


print(linear_search([1, 2, 3], 2))  # sa√≠da: 1
print(linear_search([1, 2, 3], 4))  # sa√≠da: -1

# ‚Äúmelhor caso‚Äù, ‚Äúpior caso‚Äù e ‚Äúcaso m√©dio‚Äù, significam que, por exemplo:
# ‚ÄúA depender da entrada, o algoritmo pode executar em O(1) ou O(n)
# ou outras complexidades mistas.‚Äú.
# o algoritmo acima, por exemplo, para entradas muito grandes, √© O(n).
# O que acontece, por√©m, caso tenha sorte e o n√∫mero que procuro seja o primeiro do array?
# Resposta: Nesse caso, mesmo para uma entrada infinita, a complexidade ser√° O(1).
# Esse √© o melhor caso desse algoritmo.
#
# De forma an√°loga, o pior caso √© o n√∫mero ser o √∫ltimo elemento do array, ou seja O(n).

# E o caso m√©dio? ü§î
# Resposta: Seria algo como O(n * 1/2), por exemplo. Nesse caso, o n√∫mero que procuro est√° no meio da lista.
# Mas, para entradas muito grandes, devo desprezar os n√∫meros menos relevantes da soma,
# ent√£o, posso simplificar e dizer que o caso m√©dio √© O(n) tamb√©m.

# Diferentes algoritmos t√™m diferentes cen√°rios de melhor caso, pior caso e caso m√©dio. Veremos v√°rios exemplos disso ao longo das pr√≥ximas se√ß√µes.
